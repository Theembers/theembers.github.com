<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TheEmbers.devFun</title>
  
  <subtitle>childlike forever :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://theembers.github.io/"/>
  <updated>2020-03-05T03:01:42.370Z</updated>
  <id>https://theembers.github.io/</id>
  
  <author>
    <name>TheEmbers Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my-house</title>
    <link href="https://theembers.github.io/2020/01/21/my-house/"/>
    <id>https://theembers.github.io/2020/01/21/my-house/</id>
    <published>2020-01-21T07:11:27.000Z</published>
    <updated>2020-03-05T03:01:42.370Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">需要密码才可以看哦.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a70fb7d0d0c8b5ace92089265c0f2f8b1d79432edd5b87e78192615963f6c3db">bd6095bf6f902e63a54ebf2ca6239355323895d6d4c3ecb461c920c0ebf7643c33c822662e2b4f6da03165e33d355c1974395cd0119379202e6ce6a639b195a10d73c159e430694ca7f869a4ee543171580f6a3f47b656f0c773e1c30c54961ad29badabcf23f45866c58b3310036b3afeb329842dc496b347f5b603726aceb85d338a9a6454af99222df2d61f098bf9123f8135527335ca67c489d2114e2f6e66d31ce45a418bea3349b632f795867d8c752443c2feb30b58d0f9176207bece26a2284df34adcb3565c22f5d50815b5199b10eb9ac83047d5321f0af03e2ec6dc93af005265f898571f6a82cb75eeafe2c77aab9034eeedae32c1616a85c8dbdef17ceb6575b0aa928b8382a5823c92f2e9f2a474d7ce2570b268d70efb0752e9f9fe418565080305997d8f6b4bba659688a0d42a9e8ec32f42729be76ffd4a62e9fa32f72aae121c62b3eb262b328f2a0a13a9ec003b69de97a11e0012f6a8ab0f707e109a1b7532dcfbbb038630d0b79a312699e4bd8c1b34c70841ce048621dca9f289d985dc113c5279fd9338a73b0f5985af19b0508f90d2550340db4edd23e4cc0af2a3a2d6801f61c5b1900d5d4f83f1615a578ce9d73c1e3c25cd0186cb15f128c440a4c9f2856b1a9bb3cb6a31f60082428e60518501423f422b042d47cdb5bd1b0f62739c1388e944903b905fb2a2440b59b8616902728a77fbb8b407a0ba91e032dbac373399aa6ee6f60dcb8643cc360745e3b362568857db355d9bf894add50f5053527dfbc48dcce092669601ef5e57a5dd0310e77777a27e9092d49e79b3db21ee64857d429fabc5ed15ba5c4ddd4c147085259d9c1404ce7daf0905bd35c51c645a685721e4afd89fccd5ce02f67118c57e78faf0c676dae84831a8957b1404c7206abd4725c23a58bbffa7ba00564bac37b600694de3e94a388247226fe8e4d019fc36aed13cde07b1146190d3b92abd7f9f79e97fa1ee0d862afd1b4e3b119c947cacf237893388bbefdc923b9d257af3d1ffd04dc417094165b1c97dee14755d6ee9f0ab77e7d9375a5b01e7d8d3b01b0af3f97ffd93928e181ed98cff52a299c02ac8382197aa451edd5016fec17e13dbf43a8ed65233db6527ea90854c7fb9301613c8da87a6f642d00213cf147305e96199659ac3bf7ebc7800eb150bc12bd332f18ebff6f0c30bc91bea5a8341b3c03ec4e4a4468cccb25098f2b4d45cb1108912953f2e77c7b600645a78b2b7dd917a4469f4e19991b66072100d47acbd71d4be0b537748296bc9981014f2ef2a5938d3de7ab8cddad31a55c963b8ab3027e7df07448542aada080df34f4b02a342ef008e32870dbc8a499c1ac6310d5a89bb6178a52b6274f83f6af5cc21d2baad3ab5d04e07349dd1e0f11737e5a8d793e1d1344f7d2e5e0671dbb585c4ccb63db26d96fdfc68c2cbaf941d4dca64e3f46e0854c9c9586b0361475bbcbba013eeb700ee75f0354e64623532d9c25cd52044e5eaaba30a9c7d5332ec1e470eb026ddad2f12ef75b792f0c5d79e4168b72ef2d5576f7a8f2a16b363f5c352606a9e723bf2fec88ca1644719f5615c4179d54748e38efa456a511e26f855ffe5b7e16e8049d91186b1c6afe2bc74ac5ae7b6bc148dec44d560a943fbf929d49d7655a3fe5bdc5147f6c990e1d235302ccb4394b9621d7b52c84254d65bd3ebce6391370cd58210c77355bd6dfaafad4b5b70b2338644aba3211fbfb28c9588e02268d42d0d37d89125ed09d06d20eaa940c8068b85aec92577032fbd006f2684c72a439668bf53a418bfaf72853f33958c2b95f5ea3327</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      有东西被加密了, 需要密码才能看.
    
    </summary>
    
      <category term="碎碎念" scheme="https://theembers.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="家装" scheme="https://theembers.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/%E5%AE%B6%E8%A3%85/"/>
    
    
      <category term="家装" scheme="https://theembers.github.io/tags/%E5%AE%B6%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>java-note[1]-JAVA源码-线程、线程池、AQS、JUC</title>
    <link href="https://theembers.github.io/2020/01/21/java-note-1/"/>
    <id>https://theembers.github.io/2020/01/21/java-note-1/</id>
    <published>2020-01-21T02:46:14.000Z</published>
    <updated>2020-03-13T09:32:43.020Z</updated>
    
    <content type="html"><![CDATA[<p><strong>源码部分只包含重点代码，其余代码忽略</strong></p><h2 id="线程与线程池"><a class="headerlink" href="#线程与线程池"></a> 线程与线程池</h2><h3 id="thread"><a class="headerlink" href="#thread"></a> thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread类实现了Runnable接口，所以说线程可以通过继承Thread来实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 守护线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> daemon = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 要被执行的方法</span></span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    <span class="comment">// 与本线程有关的ThreadLocal值，该映射由ThreadLocal类维护，注意这一点！这里是关于ThreadLocal为什么会内存泄漏的原因之一</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="threadlocal"><a class="headerlink" href="#threadlocal"></a> ThreadLocal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * ThreadLocal 维护在它自己内部类ThreadLocalMap中，这是一个类似HashMap的数据结构。</span></span><br><span class="line"><span class="comment">     * 其内部 Entry 对象继承了弱引用类型 WeakReference 也就是说这个对象会在下一次GC时被回收。注意这里是ThreadLocal为什么会内存泄漏之二。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">            <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如代码注释山标记了两个“注意”，ThreadLocalMap在Thread中存在一个强引用链，而在ThreadLocal中则是一个弱引用链。如果此时如下图所示，发生了GC会导致弱引用中的Key值被回收，而此时当前线程并没有停止，所以强引用链依旧存在，但是并不能通过get方法获取到value（因为key被回收变成了null）。所以value会一直存在于内存中（如果当前线程一直存活），最后导致内存泄漏。</p><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20200122140356.png" alt></p><p>关于ThreadLocal的使用技巧以及如何保证在使用时不会被过早的GC可以参考<a href="https://blog.csdn.net/qq_27258799/article/details/51968527" target="_blank" rel="noopener">这篇文章</a></p><blockquote><p>JDK建议将ThreadLocal变量定义成private static的，这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露。</p></blockquote><h3 id="executorservice-线程池"><a class="headerlink" href="#executorservice-线程池"></a> ExecutorService 线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工作队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"><span class="comment">// 可重入锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 工作线程对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程对象</span></span><br><span class="line"><span class="comment"> * 继承了AQS,说明它自生是带有锁机制的，他所代表的线程状态（即work自己的状态）都是AQS机制的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">    <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br><span class="line"></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">            setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker AQS 初始状态</span></span><br><span class="line">            <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">            <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runWorker(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前有效的线程数 &amp; 当前线程池的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// workerCountOf() 获取当前线程数,如果线程数小于核心线程数，则创建新线程（Worker）</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get(); <span class="comment">// 执行到这里说明addWorker()操作失败，比如被其他command抢先拉满了核心线程数。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// isRunning() 获取当前线程池状态是否为执行中，并且加入工作队列成功</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                <span class="comment">// 如果当前线程池不在执行状态，但是任务从工作队列移除成功了，则调用拒绝策略</span></span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="comment">// 如果工作线程总数为0，就创建新工作线程（至少启动一个线程。）   </span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>)) <span class="comment">// 到这说明队列满了，那么就创建扩展线程执行，注意addWorker()第二个参数。</span></span><br><span class="line">            <span class="comment">// 到这说明用拓展线程也失败了，则调用拒绝策略</span></span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行线程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">        retry: <span class="comment">// 重试点</span></span><br><span class="line">        <span class="comment">// CAS 操作</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">            <span class="comment">// 如果 线程池 停止 并且 没有新任务 队列空 则返回 （说白了就是线程停止并且完全没事干了）</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; !(rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp; !workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">// 获取工作线程数</span></span><br><span class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">                <span class="comment">// 当前工作线程数大于容量（CAPACITY 表示线程池理论容量）或者大于核心/最大设置线程数时 返回</span></span><br><span class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY ||  wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// cas 添加线程数。成功 则跳出循环（跳出到最外层循环）</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">break</span> retry;</span><br><span class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">                <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">// cas 判断当前线程状态是否与上次的状态一致，不一致则到最外层重试。</span></span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化一个工作对象</span></span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 上锁</span></span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        <span class="comment">// 把worker对象加到workers链中</span></span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 如果添加成功 那就开始调用 worker的start()方法，后续这个线程会从工作队列中获取任务自己执行。</span></span><br><span class="line"><span class="comment">                 * 可以看Worker的run方法，调用的runWorker(Worker this)，以及 getTask()从队列中获取任务。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拒绝策略</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">reject</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        handler.rejectedExecution(command, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>由此可见：</p><ol><li>线程池初始化线程其实超麻烦的，所以在一些核心场景下可以考虑优先初始化热身（把线程拉满）</li><li>keepAliveTime是表示 当前线程池有任务要执行，但是现在开启的线程池太多了，导致一些现场始终抢不到任务，所以超过这个时间没抢到任务的线程就会被回收</li><li>任务被执行完后（工作队列没任务了），则会主动调取processWorkerExit()方法来回出发回收线程操作。并且会保证只存活核心线程数或者只有一个线程（ONLY_ONE）</li></ol><p>附上线程池工作流程图：</p><center><p><img src="https://i.loli.net/2018/09/06/5b90b431ce0bf.png" alt="线程池工作流程.png"><span class="image-caption">线程池工作流程.png</span></p></center><h2 id="aqs"><a class="headerlink" href="#aqs"></a> AQS</h2><p>AQS -&gt; AbstractQueuedSynchronizer 是一种实现锁和以来等待队列的同步器框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">extends</span> <span class="title">AbstractOwnableSynchronizer</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">        <span class="comment">// 用于标记线程被终止的状态值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class="line">        <span class="comment">// 用于标记线下需要被唤醒的状态值</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">        <span class="comment">// 用于标记线程为等待状态</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">         * unconditionally propagate</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 表示可以传播下一个共享状态</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 共享状态 使用 volatile 修饰 保证了状态在多线程场景下的可见性</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Node 节点的两端引用</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前node排队时的线程实例 </span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        Node nextWaiter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/UTOOLS1583335209100.png" alt="AQS数据模型"><span class="image-caption">AQS数据模型</span></p><h2 id="juc"><a class="headerlink" href="#juc"></a> JUC</h2><h3 id="concurrenthashmap"><a class="headerlink" href="#concurrenthashmap"></a> ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 AbstractMap 并实现 ConcurrentMap 接口</span></span><br><span class="line"><span class="comment"> * AbstractMap 实现了 map 对象 的基本方法 （HashMap 也继承了这个抽象类）</span></span><br><span class="line"><span class="comment"> * ConcurrentMap 定义了 并发 Map 的一些方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">// 最大可能容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>; <span class="comment">// 默认容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>; <span class="comment">// 最大数组长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default concurrency level for this table. Unused but</span></span><br><span class="line"><span class="comment">     * defined for compatibility with previous versions of this class.</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>; <span class="comment">// 默认并发级别，在jdk1.8中有说明 不被使用，只是作为和之前的版本兼容</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>; <span class="comment">// 默认负载因子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; <span class="comment">// 链表转红黑树的阈值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// 表示正在转移</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// 表示已经转换成树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来控制表初始化和扩容的，默认值为0，当在初始化的时候指定了大小，这会将这个大小保存在sizeCtl中，大小为数组的0.75</span></span><br><span class="line"><span class="comment">     * 当为负的时候，说明表正在初始化或扩张，</span></span><br><span class="line"><span class="comment">     *     -1表示初始化</span></span><br><span class="line"><span class="comment">     *     -(1+n) n:表示活动的扩张线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node 与 hashMap 一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">            <span class="keyword">final</span> K key;</span><br><span class="line">            <span class="keyword">volatile</span> V val;</span><br><span class="line">            <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">            TreeNode&lt;K,V&gt; left;</span><br><span class="line">            TreeNode&lt;K,V&gt; right;</span><br><span class="line">            TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">            <span class="keyword">boolean</span> red;</span><br><span class="line"></span><br><span class="line">            TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">                    TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">                <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">                <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table; <span class="comment">// node 数组 2的幂，初始化懒载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable; <span class="comment">// 扩容时用来使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先看 put 再看 get</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// kv都不可以为null</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">// 获取key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 死亡for循环！</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">// table为空则初始化 </span></span><br><span class="line">                tab = initTable(); <span class="comment">// 这里不提供 initTable() 的源码 ，但需要知道的是 与 HashMap 不一样，这里的 initTable()使用的是CAS操作。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 首节点 cas 插入</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                             <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果正在迁移（resize ing..） 则进行 helpTransfer()方法进行插入。helpTransfer 此处不提供源码，原理是通过cas操作直接把node 插入 nextTable 里。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="comment">// 常规加锁插入节点， 除了加锁 过程与 hashmap 大致相同    </span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                V oldVal = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 给当前节点加锁，所以锁粒度是节点，注意与1.7中segment的不同！</span></span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="keyword">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get方法是无锁操作，所以它是支持并发的，但不代表线程安全（即 在时间序列上的读写请求顺序是不能保证顺序的，得看哪个线程先抢到锁）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;源码部分只包含重点代码，其余代码忽略&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;线程与线程池&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#线程与线程池&quot;&gt;&lt;/a&gt; 线程与线程池&lt;/h2&gt;
&lt;h3 id=&quot;thread&quot;&gt;&lt;a class=&quot;h
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="java" scheme="https://theembers.github.io/categories/dev/java/"/>
    
      <category term="jdk" scheme="https://theembers.github.io/categories/dev/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://theembers.github.io/tags/jdk/"/>
    
      <category term="源码解析" scheme="https://theembers.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>java-note[0]-JAVA源码-基本类型</title>
    <link href="https://theembers.github.io/2020/01/19/java-note-0/"/>
    <id>https://theembers.github.io/2020/01/19/java-note-0/</id>
    <published>2020-01-19T07:50:46.000Z</published>
    <updated>2020-03-12T03:31:41.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="string-stringbuffer-stringbuilder"><a class="headerlink" href="#string-stringbuffer-stringbuilder"></a> String &amp; StringBuffer &amp; StringBuilder</h2><ul><li><p>String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 char 数组作为数据存储（在jdk1.9改用byte[]。优化存储空间占用，一个char占用两个byte空间）</span></span><br><span class="line"><span class="comment"> * 使用 final 修饰，说明value[]不可变。</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 如果是通过构造函数创建字符串类型，那么值是通过传入的魔法值进行获取的，也就是说当前实例的value是常量池的引用。</span></span><br><span class="line"><span class="comment"> * 所以说 使用 `new String("123")` 这种方式会产生两个字符串，一个在常量池中，一个在堆里。</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StringBuffer</p><p>继承父类 AbstractStringBuilder value 与 String 不同，是没有被 final 修饰的。所以在连续拼接时，不会像 String 那样需要创建新的对象。在效率上更高。（效率提升来自于省略了对象实例化过程）</p><p>初始 capacity = 16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a copy, don't share the array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StringBuilder</p><p>相对于StringBuilder，他的一系列方法都使用 synchronized 进行加锁控制。<br>使用 toStringCache 作为 toString 方法的缓存器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">char</span>[] toStringCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没被修改的时候, 就可以直接把toStringCache作为new String的参数. 然后把这个String返回就行了。</span></span><br><span class="line"><span class="comment"> * 也就是cache有效的时候, 就不必进行arraycopy的复制操作. cache失效了才进行arraycopy的复制操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toStringCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        toStringCache = Arrays.copyOfRange(value, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(toStringCache, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="collection"><a class="headerlink" href="#collection"></a> Collection</h2><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20200120135632.png" alt="java基本集合框架"><span class="image-caption">java基本集合框架</span></p><h3 id="list"><a class="headerlink" href="#list"></a> List</h3><h4 id="arraylist"><a class="headerlink" href="#arraylist"></a> ArrayList</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DEFAULT_CAPACITY 为默认容量，但是在初始化时使用 EMPTY_ELEMENTDATA 或者 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 进行初始化，</span></span><br><span class="line"><span class="comment"> * 所以此时真实容量大小为空（empty）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当 elementData 为空时 比较 minCapacity 和 DEFAULT_CAPACITY 的值，取最大的。</span></span><br><span class="line"><span class="comment"> * 也就是， 有值的时候最小容量为 DEFAULT_CAPACITY = 10</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// minCapacity (所需的容积大小) 大于 现在的容积大小时进行扩容。</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 新容量=老容量+老容量的一半</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 如果所需的容量大于 MAX_ARRAY_SIZE (VM 限制的 大小 `MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8`)</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 巨型容量扩容</span></span><br><span class="line"><span class="comment"> * 初始化为 Integer.MAX_VALUE</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="linkedlist"><a class="headerlink" href="#linkedlist"></a> LinkedList</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>LinkedList 实现了 List 和 Deque 接口，所以可以作为列表和双端队列使用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 静态内部 node 类</span></span><br><span class="line"><span class="comment">* 双向链表节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取 元素</span></span><br><span class="line"><span class="comment">* 如果 index 值小于链表长度 size 的一半，从头开始查询，否则从尾开始查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入 元素</span></span><br><span class="line"><span class="comment">* 先查找再替换，并返回旧值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vector"><a class="headerlink" href="#vector"></a> Vector</h4><p>与 ArrayList 相似，但是 Vector 是同步的(它的public方法都使用了 synchronized 修饰)。所以说 Vector 是线程安全的动态数组。它的操作与 ArrayList 几乎一样。</p><h4 id="stack"><a class="headerlink" href="#stack"></a> Stack</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stack 继承了 Vector 实现一个后进先出的堆栈。</span></span><br><span class="line"><span class="comment"> * 它的 pop() 和 peek() 方法也使用了 synchronized 修饰</span></span><br><span class="line"><span class="comment"> * push() 调用父级 Vector 的 addElement 方法 也是同步的</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="iterator-接口-listiterator-接口"><a class="headerlink" href="#iterator-接口-listiterator-接口"></a> Iterator 接口 &amp; ListIterator 接口</h4><p>Iterator 是一个接口，它是集合的迭代器。集合可以通过 Iterator 去遍历集合中的元素。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断集合里是否存在下一个元素。如果有，hasNext() 方法返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回集合里下一个元素</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 删除集合里上一次next方法返回的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 循环遍历（since 1.8）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>ListIterator 接口继承 Iterator 接口，提供了专门操作 List 的方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断集合里是否存在上一个元素。如果有，hasPrevious() 方法返回 true</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回上一个元素</span></span><br><span class="line"><span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br></pre></td></tr></table></figure><p>以上两个接口相比较会发现，ListIterator 增加了向前迭代的功能（ Iterator 只能向后迭代），ListIterator 还可以通过 add() 方法向 List 集合中添加元素（Iterator 只能删除元素）。</p><h3 id="queue"><a class="headerlink" href="#queue"></a> Queue</h3><h4 id="linkedlist-2"><a class="headerlink" href="#linkedlist-2"></a> LinkedList</h4><p>如上</p><h4 id="arraydeque"><a class="headerlink" href="#arraydeque"></a> ArrayDeque</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 底层是Object数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_INITIAL_CAPACITY = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认初始大小为16</span></span><br><span class="line"><span class="comment"> * 在如果是指定的大小，会通过 calculateSize(int numElements) 方法转换为对应的 2 的次方加1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">    allocateElements(numElements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[calculateSize(numElements)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateSize</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</span><br><span class="line">    <span class="comment">// Find the best power of two to hold elements.</span></span><br><span class="line">    <span class="comment">// Tests "&lt;=" because arrays aren't kept full.</span></span><br><span class="line">    <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123;</span><br><span class="line">        initialCapacity = numElements;</span><br><span class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</span><br><span class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</span><br><span class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</span><br><span class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</span><br><span class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">        initialCapacity++; <span class="comment">// +1</span></span><br><span class="line">        <span class="comment">// 如果元素太大超过了 integer 的最大值 则会变成负数</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   <span class="comment">// Too many elements, must back off</span></span><br><span class="line">            initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">// Good luck allocating 2 ^ 30 elements</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> initialCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="priorityqueue"><a class="headerlink" href="#priorityqueue"></a> PriorityQueue</h4><p>优先队列PriorityQueue是Queue接口的实现，可以对其中元素进行排序，可以放基本数据类型的包装类（如：Integer，Long等）或自定义的类对于基本数据类型的包装器类，优先队列中元素默认排列顺序是升序排列但对于自己定义的类来说，需要自己定义比较器（Comparator）。</p><h3 id="set"><a class="headerlink" href="#set"></a> Set</h3><h4 id="hashset"><a class="headerlink" href="#hashset"></a> HashSet</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 底层使用HashMap存储数据，数据存在key部分，HashMap的value部分使用PRESENT填充</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">    * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入集合的size/负载因子+1，如果小于16 则初始化为16。</span></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带 dummy 的构造函数是实例化一个LinkedHashMap作为底层数据存储，主要是实现LinkedHashSet</span></span><br><span class="line"><span class="comment">     * dummy只是为了区分构造函数，没有实际意义</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">    HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="treeset-sortedset"><a class="headerlink" href="#treeset-sortedset"></a> TreeSet &amp; SortedSet</h4><p>reeSet时SortedSet接口的实现类，TreeSet可以保证元素处于排序状态，它采用红黑树的数据结构来存储集合元素。<br>TreeSet支持两种排序方法：自然排序和定制排序，默认采用自然排序。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NavigableMap接口继承了SortedMap</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br></pre></td></tr></table></figure><h2 id="map"><a class="headerlink" href="#map"></a> Map</h2><h3 id="hashmap"><a class="headerlink" href="#hashmap"></a> HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认最小容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line">    <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载因子</span></span><br><span class="line"><span class="comment">     * 表示Hsah表中元素的填满的程度.若:加载因子越大,填满的元素越多,好处是,空间利用率高了,但:冲突的机会加大了.反之,加载因子越小,填满的元素越少,好处是:冲突的机会减小了,但:空间浪费多了.</span></span><br><span class="line"><span class="comment">     * 冲突的机会越大,则查找的成本越高.反之,查找的成本越小.因而,查找时间就越小. </span></span><br><span class="line"><span class="comment">     * 因此,必须在 "冲突的机会"与"空间利用率"之间寻找一种平衡与折衷. 这种平衡与折衷本质上是数据结构中有名的"时-空"矛盾的平衡与折衷.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">// 链表转树结构的阈值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 树转链表的阈值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 最小树容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 下一个要调整大小的大小值（容量*负载系数）</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类，链表节点的数据结构。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next; <span class="comment">// 单向链表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node 重写了hash算法以及equals方法</span></span><br><span class="line"><span class="comment">     * 注意！这里是Node内部类的hash，不是指HashMap的hash方法</span></span><br><span class="line"><span class="comment">     * Objects.hashCode(o) 的实现是如果o==null则返回0，否则调用o自身的hashCode()方法的返回值</span></span><br><span class="line"><span class="comment">     * hashCode与equals的重写绝大多数是同时的，因为约定：</span></span><br><span class="line"><span class="comment">     * equals相同则hash值相同，hash相同不一定equals。此处主要是因为前半部分约定。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp; Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap的hash算法</span></span><br><span class="line"><span class="comment"> * 关于 hash算法的知识补充：</span></span><br><span class="line"><span class="comment"> * https://www.cnblogs.com/zxporz/p/11204233.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里可以看出，get()和containsKey()方法都是通过调用getNode()方法来获取或判断key的存在的。</span></span><br><span class="line"><span class="comment"> * 所以平时使用时这种：</span></span><br><span class="line"><span class="comment"> * if(map.containsKey(key))&#123;</span></span><br><span class="line"><span class="comment"> *    map.get(key);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 这种代码实际上是要两次getNode()的，所以建议取值时还是不用通过和containsKey()方法判断了。</span></span><br><span class="line"><span class="comment"> * 如果是要做有就get没有就put的话可以先get再判断是否为空，如果是则put的形式。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first; </span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果头节点是TreeNode则使用红黑树的便利方式，否则用链表便利</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map实例的isEmpty方法只是判断size是不是等于0，在平时使用时还要考虑map==null的情况防止空指针异常。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent 如果为true，不会覆盖已有值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回旧值或者null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // 以下是允许LinkedHashMap后处理的回调空实现</span></span><br><span class="line"><span class="comment"> * // Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="comment"> * void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span></span><br><span class="line"><span class="comment"> * void afterNodeInsertion(boolean evict) &#123; &#125;</span></span><br><span class="line"><span class="comment"> * void afterNodeRemoval(Node&lt;K,V&gt; p) &#123; &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链长（binCount）大于 TREEIFY_THRESHOLD - 1 则转为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果size大于下一个扩容点则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> * 输入树箱。扩展LinkedHashMap.Entry（反过来扩展Node），因此可以用作常规节点或链接节点的扩展。</span></span><br><span class="line"><span class="comment"> * 红黑树算法：</span></span><br><span class="line"><span class="comment"> * https://segmentfault.com/a/1190000012728513</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linkedhashmap"><a class="headerlink" href="#linkedhashmap"></a> LinkedHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表维护key的顺序。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment"> * true 表示访问顺序 false表示插入顺序</span></span><br><span class="line"><span class="comment"> * 访问顺序是在调用get()put()等操作时会把该元素移到链表末尾，以此可以实现LRU算法。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure><h3 id="hashtable"><a class="headerlink" href="#hashtable"></a> HashTable</h3><p>数据结构与HashMap一致，所有公共方法都使用synchronized修饰。但它是一个被抛弃的类，它的hash算法以及链表的结构没有像JDK1.8的HashMap那样优化。</p><h3 id="treemap"><a class="headerlink" href="#treemap"></a> TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 看到NavigableMap就应该知道，TreeMap是一个自排序的集合map对象。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">  <span class="comment">// 通过制定 Comparator 自定义排序规则否则默认使用元素类型的compareTo()方法进行排序。</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;string-stringbuffer-stringbuilder&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#string-stringbuffer-stringbuilder&quot;&gt;&lt;/a&gt; String &amp;amp; StringBuffer &amp;a
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="java" scheme="https://theembers.github.io/categories/dev/java/"/>
    
      <category term="jdk" scheme="https://theembers.github.io/categories/dev/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://theembers.github.io/tags/jdk/"/>
    
      <category term="源码解析" scheme="https://theembers.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>2019：恍惚而过的一年</title>
    <link href="https://theembers.github.io/2020/01/01/annual-report-2019/"/>
    <id>https://theembers.github.io/2020/01/01/annual-report-2019/</id>
    <published>2020-01-01T09:21:18.000Z</published>
    <updated>2020-03-16T09:40:12.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所谓恍惚而过"><a class="headerlink" href="#所谓恍惚而过"></a> 所谓恍惚而过</h2><p>不知道为什么，这一年对于我来说的确过得很快，甚至于在11月份还有这刚开年的感觉。</p><h2 id="中国加油武汉加油"><a class="headerlink" href="#中国加油武汉加油"></a> 中国加油！武汉加油！</h2><center><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/zhwh" alt="中国加油！武汉加油！"><span class="image-caption">中国加油！武汉加油！</span></p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;所谓恍惚而过&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#所谓恍惚而过&quot;&gt;&lt;/a&gt; 所谓恍惚而过&lt;/h2&gt;
&lt;p&gt;不知道为什么，这一年对于我来说的确过得很快，甚至于在11月份还有这刚开年的感觉。&lt;/p&gt;
&lt;h2 id=&quot;中国加油武汉加油&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="blog" scheme="https://theembers.github.io/categories/blog/"/>
    
      <category term="年终总结" scheme="https://theembers.github.io/categories/blog/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://theembers.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud - 微服务架构核心关键点</title>
    <link href="https://theembers.github.io/2019/12/11/spring-cloud-0/"/>
    <id>https://theembers.github.io/2019/12/11/spring-cloud-0/</id>
    <published>2019-12-11T01:53:12.000Z</published>
    <updated>2020-03-05T03:01:42.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务架构核心关键点"><a class="headerlink" href="#微服务架构核心关键点"></a> 微服务架构核心关键点</h2><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191211095215.png" alt="微服务架构核心关键点"><span class="image-caption">微服务架构核心关键点</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微服务架构核心关键点&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#微服务架构核心关键点&quot;&gt;&lt;/a&gt; 微服务架构核心关键点&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://image-1257148187.cos.ap-chengdu.myqcl
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="spring cloud" scheme="https://theembers.github.io/categories/dev/spring-cloud/"/>
    
    
  </entry>
  
  <entry>
    <title>redis数据基础-思维导图</title>
    <link href="https://theembers.github.io/2019/12/03/redis-0/"/>
    <id>https://theembers.github.io/2019/12/03/redis-0/</id>
    <published>2019-12-03T07:53:39.000Z</published>
    <updated>2020-03-05T03:01:42.371Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191203164848.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191203164848.jpg&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="redis" scheme="https://theembers.github.io/categories/dev/redis/"/>
    
    
      <category term="redis" scheme="https://theembers.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令 (updating)</title>
    <link href="https://theembers.github.io/2019/11/23/git-help/"/>
    <id>https://theembers.github.io/2019/11/23/git-help/</id>
    <published>2019-11-23T06:30:48.000Z</published>
    <updated>2020-03-05T03:01:42.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="仓库"><a class="headerlink" href="#仓库"></a> 仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h4 id="配置"><a class="headerlink" href="#配置"></a> 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h4 id="增加删除文件"><a class="headerlink" href="#增加删除文件"></a> 增加/删除文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h4 id="代码提交"><a class="headerlink" href="#代码提交"></a> 代码提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h4 id="分支"><a class="headerlink" href="#分支"></a> 分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h4 id="标签"><a class="headerlink" href="#标签"></a> 标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h4 id="查看信息"><a class="headerlink" href="#查看信息"></a> 查看信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h4 id="远程同步"><a class="headerlink" href="#远程同步"></a> 远程同步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h4 id="撤销"><a class="headerlink" href="#撤销"></a> 撤销</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;仓库&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#仓库&quot;&gt;&lt;/a&gt; 仓库&lt;/h4&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="git" scheme="https://theembers.github.io/categories/dev/git/"/>
    
    
      <category term="git" scheme="https://theembers.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>IoT 数据采集框架 (IoT-DC)</title>
    <link href="https://theembers.github.io/2019/11/18/iot-framework-dc/"/>
    <id>https://theembers.github.io/2019/11/18/iot-framework-dc/</id>
    <published>2019-11-18T09:19:45.000Z</published>
    <updated>2020-03-05T03:01:42.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iot-dc-framework"><a class="headerlink" href="#iot-dc-framework"></a> IoT-DC framework</h2><blockquote><p>a IoT data collector framework and power by springboot+netty+rabbitmq/kafka</p><p>一个基于 springboot+netty+rabbitmq 实现的 物联网设备(IoT) 数据接入的项目</p></blockquote><blockquote><p><strong>src</strong>: <a href="https://github.com/Theembers/iot-dc" target="_blank" rel="noopener">https://github.com/Theembers/iot-dc</a></p><p><strong>thanks for star! 😃 ⭐⭐⭐⭐⭐</strong></p></blockquote><p>the obsolete version (branch:s-0.1) will be not update yet (except bug fix), the master will be rebuild as new one. thanks follow!</p><p>旧版本以封版（分支s-0.1）不再更新（除了bug修改），master 分支将启用新的设计，敬请期待！</p><p><a href="https://github.com/Theembers/iot-dc/tree/s-0.1" target="_blank" rel="noopener">branch:s-0.1</a></p><p>🎉 new framework had be done! you can running with <code>iot-example</code>-<code>me.theembers.iot.TestCollector</code> to debug it.</p><p>🎉 新版本框架已基本完成！可以通过 <code>iot-example</code>-<code>me.theembers.iot.TestCollector</code> 运行调试。</p><h2 id="iot-platform-framework-iot平台总体架构设计"><a class="headerlink" href="#iot-platform-framework-iot平台总体架构设计"></a> IoT platform framework (IoT平台总体架构设计)</h2><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190926173357.jpg" alt="设备总体接入架构"><span class="image-caption">设备总体接入架构</span></p><h2 id="about-the-new-iot-dc-framework-关于新版-iot-dc-framework"><a class="headerlink" href="#about-the-new-iot-dc-framework-关于新版-iot-dc-framework"></a> about the new IoT-DC Framework (关于新版 IoT-DC Framework)</h2><p>抽离了netty的实现逻辑，保留了基础框架</p><ul><li>iot-framework-dc 抽象了基础的接入逻辑模型。如下图：</li></ul><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191111134357.jpg" alt="iot-framework-dc 模型"><span class="image-caption">iot-framework-dc 模型</span></p><ul><li><p>router 模型 &amp; device shadow 模型</p><p>路由器 (router)，把接入的数据分发到符合规则 (rule) 的处理器 (processor) 中进行处理。<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191111131757.jpg" alt="router 模型"><span class="image-caption">router 模型</span></p></li><li><p>processor-link 模型</p><p>router 通过选择器 (Selector) 选择出的导航 (Route) 维护了一个调度者 (Dispatcher) 调度者负责管理被使用的 processor链 以及 processor 的调用 规则:</p></li></ul><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/processor-link-1.jpg" alt="processor-link 模型"><span class="image-caption">processor-link 模型</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行</span></span><br><span class="line"><span class="comment"> * 如果 当前processor是头节点，调用 headIn （ 调用 beforeTransform &amp; transForm）</span></span><br><span class="line"><span class="comment"> * 否则 （中间节点 或者 尾节点） 调用 receive（接收）</span></span><br><span class="line"><span class="comment"> * 最终 如果 是尾结点 则 调用 tailOut （调用 afterTransform） 并 退出循环</span></span><br><span class="line"><span class="comment"> * 到 //1 则 调用 buildSlotData （构建插槽）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shadow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceData</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(Shadow shadow, SourceData sourceData)</span> </span>&#123;</span><br><span class="line">    Output output = <span class="keyword">null</span>;</span><br><span class="line">    SlotData slotData = <span class="keyword">null</span>;</span><br><span class="line">    Iterator&lt;Processor&gt; processors = <span class="keyword">this</span>.link.iterator();</span><br><span class="line">    <span class="keyword">while</span> (processors.hasNext()) &#123;</span><br><span class="line">        Processor p = processors.next();</span><br><span class="line">        <span class="keyword">if</span> (p == getFirst()) &#123;</span><br><span class="line">            output = p.headIn(shadow, sourceData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            output = p.receive(shadow, slotData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == getLast()) &#123;</span><br><span class="line">            output = p.tailOut(shadow, output);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slotData = p.passOn(shadow, output); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iot-dc-netty-server 是之前的netty实现，目前（2019-11-07）只是迁移了老模块的代码，后期会修改结构，所以暂不做架构说明。新分支侧着架构设计，所以具体实现可能要延后实现。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iot-dc-framework&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#iot-dc-framework&quot;&gt;&lt;/a&gt; IoT-DC framework&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;a IoT data collector fra
      
    
    </summary>
    
      <category term="iot" scheme="https://theembers.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://theembers.github.io/tags/iot/"/>
    
      <category term="framework" scheme="https://theembers.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>领域模型驱动设计[0]</title>
    <link href="https://theembers.github.io/2019/11/01/Domain-Driven-Design-0/"/>
    <id>https://theembers.github.io/2019/11/01/Domain-Driven-Design-0/</id>
    <published>2019-11-01T02:07:59.000Z</published>
    <updated>2020-03-05T03:01:42.358Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>模型和设计的核心（实现）互相影响<br>设计的核心就是对与现实业务需求的实现，而实现需求的逻辑则是模型的定义。<br>实现使得模型有用，而模型可解释实现。</p></li><li><p>模型是团队交流中枢<br>语义统一，减少沟通偏差和成本。</p></li><li><p>模型浓缩知识</p></li></ul><h2 id="ddd中的基本概念"><a class="headerlink" href="#ddd中的基本概念"></a> DDD中的基本概念</h2><ul><li><p>实体（Entity）<br>当一个对象由其标识(而不是属性)区分时，这种对象称为实体(Entity)。比如当两个对象的标识不同时，即使两个对象的其他属性全都相同，我们也认为他们是两个完全不同的实体。</p></li><li><p>值对象（Value Object）<br>当一个对象用于对事物进行描述而没有唯一标识时，那么它被称作值对象。因为在领域中并不是任何时候一个事物都需要有一个唯一的标识，也就是说我们并不关心具体是哪个事物，只关心这个事物是什么。比如下单流程中，对于配送地址来说，只要是地址信息相同，我们就认为是同一个配送地址。由于不具有唯一标示，我们也不能说&quot;这一个&quot;值对象或者&quot;那一个&quot;值对象。</p></li><li><p>领域服务（Domain Service）<br>一些重要的领域行为或操作，它们不太适合建模为实体对象或者值对象，它们本质上只是一些操作，并不是具体的事物，另一方面这些操作往往又会涉及到多个领域对象的操作，它们只负责来协调这些领域对象完成操作而已，那么我们可以归类它们为领域服务。它实现了全部业务逻辑并且通过各种校验手段保证业务的正确性。同时呢，它也能避免在应用层出现领域逻辑。理解起来，领域服务有点facade的味道。</p></li><li><p>聚合及聚合根（Aggregate，Aggregate Root）<br>聚合是通过定义领域对象之间清晰的所属关系以及边界来实现领域模型的内聚，以此来避免形成错综复杂的、难以维护的对象关系网。聚合定义了一组具有内聚关系的相关领域对象的集合，我们可以把聚合看作是一个修改数据的单元。<br>聚合根属于实体对象，它是领域对象中一个高度内聚的核心对象。(聚合根具有全局的唯一标识，而实体只有在聚合内部有唯一的本地标识，值对象没有唯一标识，不存在这个值对象或那个值对象的说法)<br>若一个聚合仅有一个实体，那这个实体就是聚合根；但要有多个实体，我们就要思考聚合内哪个对象有独立存在的意义且可以和外部领域直接进行交互。</p></li><li><p>工厂（Factory）<br>DDD中的工厂也是一种封装思想的体现。引入工厂的原因是：有时创建一个领域对象是一件相对比较复杂的事情，而不是简单的new操作。工厂的作用是隐藏创建对象的细节。事实上大部分情况下，领域对象的创建都不会相对太复杂，故我们仅需使用简单的构造函数创建对象就可以。隐藏创建对象细节的好处是显而易见的，这样就可以不会让领域层的业务逻辑泄露到应用层，同时也减轻应用层负担，它只要简单调用领域工厂来创建出期望的对象就可以了。</p></li><li><p>仓储（Repository）<br>资源仓储封装了基础设施来提供查询和持久化聚合操作。这样能够让我们始终关注在模型层面，把对象的存储和访问都委托给资源库来完成。它不是数据库的封装，而是领域层与基础设施之间的桥梁。DDD 关心的是领域内的模型，而不是数据库的操作。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模型和设计的核心（实现）互相影响&lt;br&gt;
设计的核心就是对与现实业务需求的实现，而实现需求的逻辑则是模型的定义。&lt;br&gt;
实现使得模型有用，而模型可解释实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型是团队交流中枢&lt;br&gt;
语义统一，减少沟通偏差和成本。
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="DDD" scheme="https://theembers.github.io/categories/dev/DDD/"/>
    
    
  </entry>
  
  <entry>
    <title>spring-cloud-bus-config 消息总线&amp;配置中心</title>
    <link href="https://theembers.github.io/2019/10/12/spring-cloud-bus-config/"/>
    <id>https://theembers.github.io/2019/10/12/spring-cloud-bus-config/</id>
    <published>2019-10-12T01:56:07.000Z</published>
    <updated>2020-03-11T07:25:22.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景意义"><a class="headerlink" href="#场景意义"></a> 场景&amp;意义</h2><p>在不重启服务的情况下更新配置，但逐一调用服务的api去修改是很不科学的。所以可以利用消息队列发布订阅的模型，让所有为服务来订阅这个事件，当这个事件发生改变了，就可以通知所有微服务去更新它们的内存中的配置信息。</p><p>spring-cloud-bus 消息总线就就是在spring-cloud-config-server端发出refresh，触发所有微服务更新配置。</p><h2 id="搭建demo项目"><a class="headerlink" href="#搭建demo项目"></a> 搭建demo项目</h2><ul><li>spring cloud<ul><li>eureka</li><li>config-bus (集成了config 配置中心 &amp; bus 消息总线)</li><li>web-api</li></ul></li></ul><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191016130547.png" alt="demo项目结构说明"><span class="image-caption">demo项目结构说明</span></p><h2 id="更新配置加载"><a class="headerlink" href="#更新配置加载"></a> 更新配置&amp;加载</h2><ol><li>commit&amp;push git配置 到git服务器</li><li>调用refresh接口刷新服务器配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># springboot 2.x</span></span><br><span class="line"> curl -X POST <span class="string">"192.168.9.97:8868/actuator/bus-refresh"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># springboot 1.x</span></span><br><span class="line"> curl -X GET <span class="string">"192.168.9.97:8868/bus/refresh"</span></span><br></pre></td></tr></table></figure><h2 id="灰度更新"><a class="headerlink" href="#灰度更新"></a> 灰度更新</h2><p>灰度更新是为了在多节点集群中，只更新部分服务的配置用于参数测试，而其他服务依旧使用之前的配置。<br>spring cloud bus 通过 destination 参数指定需要更新对服务来刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># springboot 2.X</span></span><br><span class="line">curl -X POST <span class="string">"192.168.9.97:8868/actuator/bus-refresh/&#123;destination&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#springboot 1.X</span></span><br><span class="line">curl -X GET <span class="string">"192.168.9.97:8868/bus/refresh?destination=&#123;ApplicationContext ID&#125;"</span></span><br></pre></td></tr></table></figure><p>destination 参数为 ApplicationContext ID 例如本例中的 <code>api-gateway:8869</code> 或者 <code>api-gateway:**</code></p><h2 id="通过配置-git-仓库-webhooks-来自动调用接口"><a class="headerlink" href="#通过配置-git-仓库-webhooks-来自动调用接口"></a> 通过配置 Git 仓库 WebHooks 来自动调用接口</h2><p>git 配置修改后自动回调。</p><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191016133403.png" alt="git 回调配置"><span class="image-caption">git 回调配置</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景意义&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#场景意义&quot;&gt;&lt;/a&gt; 场景&amp;amp;意义&lt;/h2&gt;
&lt;p&gt;在不重启服务的情况下更新配置，但逐一调用服务的api去修改是很不科学的。所以可以利用消息队列发布订阅的模型，让所有为服务来订阅这个事件，
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="spring cloud" scheme="https://theembers.github.io/categories/dev/spring-cloud/"/>
    
    
      <category term="spring-cloud-bus" scheme="https://theembers.github.io/tags/spring-cloud-bus/"/>
    
      <category term="spring-cloud-config" scheme="https://theembers.github.io/tags/spring-cloud-config/"/>
    
  </entry>
  
  <entry>
    <title>小雪第三阶段-生日快乐~ヽ(=^･ω･^=)</title>
    <link href="https://theembers.github.io/2019/10/05/cat-in-the-house-2/"/>
    <id>https://theembers.github.io/2019/10/05/cat-in-the-house-2/</id>
    <published>2019-10-05T02:59:59.000Z</published>
    <updated>2020-03-05T03:01:42.361Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191012170551.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20191012170551.jpg&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="blog" scheme="https://theembers.github.io/categories/blog/"/>
    
      <category term="碎碎念" scheme="https://theembers.github.io/categories/blog/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="cat" scheme="https://theembers.github.io/tags/cat/"/>
    
      <category term="雪糕" scheme="https://theembers.github.io/tags/%E9%9B%AA%E7%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud health - 如何实现规范的自定义健康检查指标</title>
    <link href="https://theembers.github.io/2019/08/12/spring-cloud-health-1/"/>
    <id>https://theembers.github.io/2019/08/12/spring-cloud-health-1/</id>
    <published>2019-08-12T02:33:17.000Z</published>
    <updated>2020-03-05T03:01:42.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引"><a class="headerlink" href="#引"></a> 引</h2><p>Spring Boot Actuator 有几个预定义的健康指标比如 DataSourceHealthIndicator, DiskSpaceHealthIndicator, MongoHealthIndicator, RedisHealthIndicator, CassandraHealthIndicator等。它使用这些健康指标作为健康检查的一部分。</p><p>本文对比较常用数据源健康指标 DataSourceHealth 相关的源码进行研究解读，以此作为自定义 HealthIndicator 的编程基础。已实现规范的HealthIndicator编程模式。</p><h2 id="datasourcehealthindicator-源码核心部分"><a class="headerlink" href="#datasourcehealthindicator-源码核心部分"></a> DataSourceHealthIndicator 源码核心部分</h2><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812104113.png" alt="DataSourceHealthIndicator UML结构"><span class="image-caption">DataSourceHealthIndicator UML结构</span></p><p>根据UML图可知：</p><ul><li><p>实现 InitializingBean 接口 并实现 afterPropertiesSet() 方法<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812104445.png" alt><br>如果 dataSource 为null 则抛出 IllegalStateException 异常</p></li><li><p>继承 AbstractHealthIndicator 抽象类 并实现doHealthCheck() 方法<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812105030.png" alt><br>如果 dataSource 为null 则 标记 up 并显示 database unknow. 否则执行 doDataSourceHealthCheck()<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812105620.png" alt></p></li></ul><h2 id="datasourcehealthindicatorautoconfiguration-源码核心部分"><a class="headerlink" href="#datasourcehealthindicatorautoconfiguration-源码核心部分"></a> DataSourceHealthIndicatorAutoConfiguration 源码核心部分</h2><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812111404.png" alt="DataSourceHealthIndicatorAutoConfiguration UML结构"><span class="image-caption">DataSourceHealthIndicatorAutoConfiguration UML结构</span></p><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190812111220.png" alt></p><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 某个class位于类路径上，才会实例化一个Bean 这里是JdbcTemplate和AbstractRoutingDataSource存在时才实例化</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; JdbcTemplate<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractRoutingDataSource</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">// 仅仅在当前上下文中存在某个对象时，才会实例化一个<span class="title">Bean</span> 这里是<span class="title">DataSource</span> 的<span class="title">bean</span>存在是</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnBean</span>(<span class="title">DataSource</span>.<span class="title">class</span>)</span></span><br><span class="line">// Actuator 中自定义的 EnabledHealthIndicator 中 包含 "x" 时实例化Bean</span><br><span class="line"><span class="meta">@ConditionalOnEnabledHealthIndicator</span>(<span class="string">"db"</span>)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(HealthIndicatorAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(<span class="title">DataSourceAutoConfiguration</span>.<span class="title">class</span>)</span></span><br></pre></td></tr></table></figure><p>以此可以看出，Actuator 的 healthy 是依赖于 config 配置的实例化机制，通过bean加载所需的资源进行验证。</p><p>所以对于自定义的检测指标可按照这种方式进行编程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#引&quot;&gt;&lt;/a&gt; 引&lt;/h2&gt;
&lt;p&gt;Spring Boot Actuator 有几个预定义的健康指标比如 DataSourceHealthIndicator, DiskSpaceHealthIndic
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="spring cloud" scheme="https://theembers.github.io/categories/dev/spring-cloud/"/>
    
    
      <category term="Spring Cloud Health" scheme="https://theembers.github.io/tags/Spring-Cloud-Health/"/>
    
  </entry>
  
  <entry>
    <title>IOT[1]-MQTT相关介绍</title>
    <link href="https://theembers.github.io/2019/08/02/iot-1-mqtt/"/>
    <id>https://theembers.github.io/2019/08/02/iot-1-mqtt/</id>
    <published>2019-08-02T02:12:37.000Z</published>
    <updated>2020-03-05T02:50:57.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="headerlink" href="#简介"></a> 简介</h2><p>MQTT 全称为 Message Queuing Telemetry Transport（消息队列遥测传输）是一种基于发布/订阅范式的“轻量级”消息协议，由 IBM 发布。</p><ul><li>MQTT 可以被解释为一种低开销，低带宽占用的即时通讯协议，可以用极少的代码和带宽的为连接远程设备提供实时可靠的消息服务，它适用于硬件性能低下的远程设备以及网络状况糟糕的环境下，因此 MQTT 协议在 IoT（Internet of things，物联网），小型设备应用，移动应用等方面有较广泛的应用。</li><li>IoT 设备要运作，就必须连接到互联网，设备才能相互协作，以及与后端服务协同工作。而互联网的基础网络协议是 TCP/IP，MQTT 协议是基于 TCP/IP 协议栈而构建的，因此它已经慢慢的已经成为了 IoT 通讯的标准。</li></ul><h2 id="基本特性"><a class="headerlink" href="#基本特性"></a> 基本特性</h2><ul><li>MQTT是一种<strong>发布/订阅</strong>的传输协议<br>MQTT 协议提供一对多的消息发布，可以解除应用程序耦合，信息冗余小。该协议需要客户端和服务端，而协议中主要有三种身份：发布者（Publisher）、代理（Broker，服务器）、订阅者（Subscriber）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，而消息发布者可以同时是订阅者，实现了生产者与消费者的脱耦。</li><li>基于 TCP/IP 提供网络连接，提供有序、无损、双向连接</li><li>对负载内容屏蔽的消息传输（安全性）</li><li>具体有三种消息发布的服务质量：<ul><li>至多一次，消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li><li>至少一次，确保消息到达，但消息重复可能会发生。</li><li>只有一次，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li></ul></li><li>小型传输，开销小，固定长度的头部是 2 字节，协议交换最小化，以降低网络流量<br>整体上协议可拆分为：固定头部+可变头部+消息体，这就是为什么在介绍里说它非常适合&quot;在物联网领域，传感器与服务器的通信，信息的收集&quot;。</li><li>使用Last Will和Testament特性通知有关各方客户端异常中断的机制<br>Last Will：即遗言机制，用于通知同一主题下的其他设备发送遗言的设备已经断开了连接。<br>Testament：遗嘱机制，功能类似于Last Will。</li></ul><h2 id="基本概念"><a class="headerlink" href="#基本概念"></a> 基本概念</h2><h3 id="mqtt-客户端"><a class="headerlink" href="#mqtt-客户端"></a> MQTT 客户端</h3><ul><li>发布消息</li><li>订阅消息</li><li>退订或删除消息</li><li>断开与服务器连接</li></ul><h3 id="mqtt-服务端-broker消息代理"><a class="headerlink" href="#mqtt-服务端-broker消息代理"></a> MQTT 服务端 Broker（消息代理）</h3><ul><li>接受来自客户端的网络连接</li><li>接受客户端发布的应用信息</li><li>处理来自客户端的订阅和退订请求</li><li>向订阅的客户转发应用程序消息</li></ul><h3 id="主题topic"><a class="headerlink" href="#主题topic"></a> 主题（topic）</h3><p>连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p><p>要订阅的主题。一个主题可以有多个级别，级别之间用斜杠字符分隔。例如，/world 和 emq/emqtt/emqx 是有效的主题。</p><p>订阅者的Topic name支持通配符#和+ ：</p><ul><li>#支持一个主题内任意级别话题</li><li>+只匹配一个主题级别的通配符</li></ul><p>客户端成功订阅某个主题后，代理会返回一条 SUBACK 消息，其中包含一个或多个 returnCode 参数</p><h3 id="主题筛选器topic-filter"><a class="headerlink" href="#主题筛选器topic-filter"></a> 主题筛选器（Topic Filter）</h3><p>一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p><h3 id="qos消息传递的服务质量水平"><a class="headerlink" href="#qos消息传递的服务质量水平"></a> QoS（消息传递的服务质量水平）</h3><p>服务质量，标志表明此主题范围内的消息传送到客户端所需的一致程度。</p><ul><li>值 0：不可靠，消息基本上仅传送一次，如果当时客户端不可用，则会丢失该消息。</li><li>值 1：消息应传送至少 1 次。</li><li>值 2：消息仅传送一次。</li></ul><h3 id><a class="headerlink" href="#"></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;MQTT 全称为 Message Queuing Telemetry Transport（消息队列遥测传输）是一种基于发布/订阅范式的“轻量级”消息协议，由 
      
    
    </summary>
    
      <category term="iot" scheme="https://theembers.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://theembers.github.io/tags/iot/"/>
    
      <category term="mqtt" scheme="https://theembers.github.io/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>IOT[0]-设备接入&amp;数据流转架构设计图</title>
    <link href="https://theembers.github.io/2019/08/01/iot-0/"/>
    <id>https://theembers.github.io/2019/08/01/iot-0/</id>
    <published>2019-08-01T06:34:45.000Z</published>
    <updated>2020-03-05T03:01:42.366Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190801162249.jpg" alt="IOT设备接入&amp;数据流转架构设计图"><span class="image-caption">IOT设备接入&amp;数据流转架构设计图</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190801162249.jpg&quot; alt=&quot;IOT设备接入&amp;amp;数据流转架构设计图&quot;&gt;&lt;span class=&quot;ima
      
    
    </summary>
    
      <category term="iot" scheme="https://theembers.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://theembers.github.io/tags/iot/"/>
    
      <category term="framework" scheme="https://theembers.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud health - actuator相关</title>
    <link href="https://theembers.github.io/2019/07/15/spring-cloud-health/"/>
    <id>https://theembers.github.io/2019/07/15/spring-cloud-health/</id>
    <published>2019-07-15T02:41:48.000Z</published>
    <updated>2020-03-05T02:50:57.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eureka-health-前置"><a class="headerlink" href="#eureka-health-前置"></a> Eureka Health 前置</h2><ul><li>spring boot/cloud 版本 2.0.1</li><li>JDK 1.8</li></ul><p>默认情况下注册到eureka server的服务是通过心跳来告知自己是UP还是DOWN，并不是通过spring-boot-actuator模块的/health端点来实现的。<br>默认的心跳实现方式可以有效的检查eureka客户端进程是否正常运作，但是无法保证客户端应用能够正常提供服务。由于大多数微服务应用都会有一些其他的外部资源依赖，比如数据库，REDIS缓存等，如果我们的应用与这些外部资源无法连通的时候，实际上已经不能提供正常的对外服务了，但因为客户端心跳依然在运行，所以它还是会被服务消费者调用，而这样的调用实际上并不能获得预期的后果。</p><p>我们可以通过在eureka客户端中配置:<code>eureka.client.healthcheck.enabled=true</code>，就可以改变eureka server对客户端健康检测的方式，改用actuator的/health端点来检测。</p><h2 id="关于-spring-boot-starter-actuator"><a class="headerlink" href="#关于-spring-boot-starter-actuator"></a> 关于 spring-boot-starter-actuator</h2><h3 id="依赖"><a class="headerlink" href="#依赖"></a> 依赖</h3><p><code>org.springframework.boot:spring-boot-starter-actuator</code></p><h3 id="api"><a class="headerlink" href="#api"></a> API</h3><p><code>http://ip:port/[project-content-path]/actuator/**</code></p><p><strong>以前的版本是没有/actuator前缀的，2.0以后的版本都加了/actuator前缀</strong></p><p>默认情况下，actuator只暴露了 <code>/health</code> 和 <code>/info</code> 两个接口，其他接口可以在yml中添加如下配置打开：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li><p>查看支持的api列表：<code>http://ip:port/[project-content-path]/actuator</code><br>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_links"</span>: &#123;</span><br><span class="line">    <span class="attr">"self"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"archaius"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/archaius"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"auditevents"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/auditevents"</span>, </span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 显示应用暴露的审计事件 (比如认证进入、失败)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"beans"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/beans"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 加载的bean列表</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"health"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/health"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 健康状态 up down</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"conditions"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/conditions"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"configprops"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/configprops"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 显示所有的配置列表 @ConfigurationProperties</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/env"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 环境变量信息</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"env-toMatch"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/env/&#123;toMatch&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/info"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"loggers"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/loggers"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 日志埋点信息</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"loggers-name"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/loggers/&#123;name&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"heapdump"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/heapdump"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"threaddump"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/threaddump"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 执行线程转储</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"metrics-requiredMetricName"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/metrics/&#123;requiredMetricName&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span> 显示当前应用程序的“指标”信息</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"metrics"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/metrics"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 显示当前应用程序的“指标”信息名称列表（requiredMetricName 列表）</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"scheduledtasks"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/scheduledtasks"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"httptrace"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/httptrace"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 最近的<span class="number">100</span>个（默认）http请求信息</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/mappings"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span> 显示所有@RequestMapping路径的整理列表</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"refresh"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/refresh"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"features"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/features"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"service-registry"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/service-registry"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hystrix.stream"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://192.168.9.73:19342/actuator/hystrix.stream"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多说明：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html</a></p></blockquote></li></ul><h2 id="health-相关"><a class="headerlink" href="#health-相关"></a> /health 相关</h2><p><code>http://ip:port/[project-content-path]/actuator/health</code><br>默认只会显示status状态值 up 或者 down，如果需要显示详细详细需要在配置中设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> </span><br><span class="line">      <span class="comment"># 默认为 'never' 永远不显示</span></span><br><span class="line">      <span class="comment"># 'when-authorized' 详细信息仅向授权用户显示。可以使用配置授权角色 management.endpoint.health.roles。</span></span><br><span class="line">      <span class="comment"># always 始终显示</span></span><br></pre></td></tr></table></figure><h3 id="healthindicators-健康指标"><a class="headerlink" href="#healthindicators-健康指标"></a> HealthIndicators 健康指标</h3><ul><li>默认自带以下健康检测项目：</li></ul><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">CassandraHealthIndicator</td><td style="text-align:left">Checks that a Cassandra database is up.</td></tr><tr><td style="text-align:left">CouchbaseHealthIndicator</td><td style="text-align:left">Checks that a Couchbase cluster is up.</td></tr><tr><td style="text-align:left">DiskSpaceHealthIndicator</td><td style="text-align:left">Checks for low disk space.</td></tr><tr><td style="text-align:left">DataSourceHealthIndicator</td><td style="text-align:left">Checks that a connection to DataSource can be obtained.</td></tr><tr><td style="text-align:left">ElasticsearchHealthIndicator</td><td style="text-align:left">Checks that an Elasticsearch cluster is up.</td></tr><tr><td style="text-align:left">InfluxDbHealthIndicator</td><td style="text-align:left">Checks that an InfluxDB server is up.</td></tr><tr><td style="text-align:left">JmsHealthIndicator</td><td style="text-align:left">Checks that a JMS broker is up.</td></tr><tr><td style="text-align:left">MailHealthIndicator</td><td style="text-align:left">Checks that a mail server is up.</td></tr><tr><td style="text-align:left">MongoHealthIndicator</td><td style="text-align:left">Checks that a Mongo database is up.</td></tr><tr><td style="text-align:left">Neo4jHealthIndicator</td><td style="text-align:left">Checks that a Neo4j server is up.</td></tr><tr><td style="text-align:left">RabbitHealthIndicator</td><td style="text-align:left">Checks that a Rabbit server is up.</td></tr><tr><td style="text-align:left">RedisHealthIndicator</td><td style="text-align:left">Checks that a Redis server is up.</td></tr><tr><td style="text-align:left">SolrHealthIndicator</td><td style="text-align:left">Checks that a Solr server is up.</td></tr></tbody></table><ul><li><p>自定义 HealthIndicator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorCode = check(); <span class="comment">// perform some specific health check 执行自定义的检测逻辑。</span></span><br><span class="line">        <span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">"Error Code"</span>, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 假装检测到异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>/health</code> api中会多返回一个名为Extended的项，如图：<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190715150821.png" alt></p><p>同时在eureka中：<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190715151120.png" alt></p><h3 id="响应式-healthindicator"><a class="headerlink" href="#响应式-healthindicator"></a> 响应式 HealthIndicator</h3><p>响应式编程相关 spring reactor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedReactiveHealthIndicator</span> <span class="keyword">implements</span> <span class="title">ReactiveHealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Health&gt; <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doHealthCheck() <span class="comment">//perform some specific health check that returns a Mono&lt;Health&gt;</span></span><br><span class="line">                .onErrorResume(ex -&gt; Mono.just(<span class="keyword">new</span> Health.Builder().down(ex).build())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="loggers-相关"><a class="headerlink" href="#loggers-相关"></a> /loggers 相关</h2><ul><li><p>查看<br><code>http://ip:port/[project-content-path]/actuator/loggers</code><br>查看应用中可配置的loggers的列表和相关的日志等级。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"levels"</span>: [</span><br><span class="line">    <span class="string">"OFF"</span>,</span><br><span class="line">    <span class="string">"ERROR"</span>,</span><br><span class="line">    <span class="string">"WARN"</span>,</span><br><span class="line">    <span class="string">"INFO"</span>,</span><br><span class="line">    <span class="string">"DEBUG"</span>,</span><br><span class="line">    <span class="string">"TRACE"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"loggers"</span>: &#123;</span><br><span class="line">    <span class="attr">"ROOT"</span>: &#123;</span><br><span class="line">      <span class="attr">"configuredLevel"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">      <span class="attr">"effectiveLevel"</span>: <span class="string">"INFO"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"com"</span>: &#123;</span><br><span class="line">      <span class="attr">"configuredLevel"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"effectiveLevel"</span>: <span class="string">"INFO"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看某一项<br><code>http://ip:port/[project-content-path]/actuator/loggers</code></p></li><li><p>运行时改变日志等级<br>使用POST请求可以修改某一项的日志等级,例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST http://ip:port/[project-content-path]/actuator/loggers/ROOT</span><br><span class="line">body:</span><br><span class="line">&#123;</span><br><span class="line"> &quot;configuredLevel&quot;: &quot;INFO&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;eureka-health-前置&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#eureka-health-前置&quot;&gt;&lt;/a&gt; Eureka Health 前置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;spring boot/cloud 版本 2.0.1&lt;/li&gt;
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="spring cloud" scheme="https://theembers.github.io/categories/dev/spring-cloud/"/>
    
    
      <category term="Spring Cloud Health" scheme="https://theembers.github.io/tags/Spring-Cloud-Health/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch[7]-映射(mapping)</title>
    <link href="https://theembers.github.io/2019/07/10/es-7/"/>
    <id>https://theembers.github.io/2019/07/10/es-7/</id>
    <published>2019-07-10T02:45:25.000Z</published>
    <updated>2020-03-05T02:50:57.362Z</updated>
    
    <content type="html"><![CDATA[<p>当ES在文档中探测到新的字符串字段将默认设置为全文string字段并使用标准分析器（standard）分析。为了使用更适合的分析器或者不做任何处理，则需要使用映射（mapping）。</p><p>之前提到每个文档都有一个类型（type），每个类型都有一个映射（mapping）或者模式定义（schema definition）一个映射定义了字段类型，每个字段的数据类型，以及字段被Elasticsearch处理的方式。映射还用于设置关联到类型上的元数据。</p><h2 id="查看映射"><a class="headerlink" href="#查看映射"></a> 查看映射</h2><p><code>GET /{index}/_mapping/{type}</code></p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /gb/_mapping/tweet</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"gb"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">            <span class="attr">"format"</span>: <span class="string">"strict_date_optional_time||epoch_millis"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义字段映射"><a class="headerlink" href="#自定义字段映射"></a> 自定义字段映射</h2><p>自定义字段映射可以：</p><ul><li>区分全文（full text）字符串字段和准确字符串字段。</li><li>使用特定语言的分析器</li><li>优化部分匹配字段</li><li>指定自定义日期格式</li><li>…</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tag"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>type用于标记tag为string类型</p></li><li><p>index如下：</p><table><thead><tr><th style="text-align:left">index的值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">analyzed 默认值</td><td style="text-align:left">首先分析这个字符串，然后索引。</td></tr><tr><td style="text-align:left">not_analyzed</td><td style="text-align:left">索引这个字段，使之可以被搜索，但是索引内容和指定值一样。</td></tr><tr><td style="text-align:left">no</td><td style="text-align:left">不索引这个字段。这个字段不能为搜索到。</td></tr></tbody></table><blockquote><p>其他简单类型（ long 、 double 、 date 等等）也接受 index 参数，但相应的值只能是 no 和 not_analyzed ，它们的值不能被分析。</p></blockquote></li><li><p>analyzer<br>对于 analyzed 类型的字符串字段，使用 analyzer 参数来指定哪一种分析器将在搜索和索引的时候使用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"analyzer"</span>: <span class="string">"english"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新映射"><a class="headerlink" href="#更新映射"></a> 更新映射</h2><p>可以在第一次创建索引的时候指定映射的类型。也可以晚些时候为新类型添加映射（或者为已有的类型更新映射）。</p><p><strong>可以向已有映射中增加字段，但不能修改它。如果一个字段在映射中已经存在，这可能意味着那个字段的数据已经被索引。如果你改变了字段映射，那已经被索引的数据将错误并且不能被正确的搜索到。</strong></p><h2 id="复合对象的索引结构"><a class="headerlink" href="#复合对象的索引结构"></a> 复合对象的索引结构</h2><p>对于复杂对象的mapping ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"gb"</span>: &#123;</span><br><span class="line">    <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"user"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"gender"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"age"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"name"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">              <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"full"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"first"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"last"</span>: &#123;</span><br><span class="line">                  <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tweet"</span>: <span class="string">"Elasticsearch is very flexible"</span>,</span><br><span class="line">  <span class="attr">"user"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"@johnsmith"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"full"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">      <span class="attr">"first"</span>: <span class="string">"John"</span>,</span><br><span class="line">      <span class="attr">"last"</span>: <span class="string">"Smith"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 其索引方式为平铺的单层结构：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tweet"</span>: [elasticsearch, flexible, very],</span><br><span class="line">  <span class="attr">"user.id"</span>: [@johnsmith],</span><br><span class="line">  <span class="attr">"user.gender"</span>: [male],</span><br><span class="line">  <span class="attr">"user.age"</span>: [<span class="number">26</span>],</span><br><span class="line">  <span class="attr">"user.name.full"</span>: [john, smith],</span><br><span class="line">  <span class="attr">"user.name.first"</span>: [john],</span><br><span class="line">  <span class="attr">"user.name.last"</span>: [smith]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"followers"</span>: [</span><br><span class="line">    &#123; <span class="attr">"age"</span>: <span class="number">35</span>, <span class="attr">"name"</span>: <span class="string">"Mary White"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"age"</span>: <span class="number">26</span>, <span class="attr">"name"</span>: <span class="string">"Alex Jones"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"age"</span>: <span class="number">19</span>, <span class="attr">"name"</span>: <span class="string">"Lisa Smith"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 其索引方式为平铺的单层结构：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"followers.age"</span>: [<span class="number">19</span>, <span class="number">26</span>, <span class="number">35</span>],</span><br><span class="line">  <span class="attr">"followers.name"</span>: [alex, jones, lisa, smith, mary, white]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当ES在文档中探测到新的字符串字段将默认设置为全文string字段并使用标准分析器（standard）分析。为了使用更适合的分析器或者不做任何处理，则需要使用映射（mapping）。&lt;/p&gt;
&lt;p&gt;之前提到每个文档都有一个类型（type），每个类型都有一个映射（mappin
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/categories/dev/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>MySQL[3]-收藏：不知道是哪里来的MySQL优化导图</title>
    <link href="https://theembers.github.io/2019/07/09/db-5/"/>
    <id>https://theembers.github.io/2019/07/09/db-5/</id>
    <published>2019-07-09T08:15:29.000Z</published>
    <updated>2020-03-05T02:50:57.359Z</updated>
    
    <content type="html"><![CDATA[<p>图是高清的 自己转存看吧~</p><p><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190709161458.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图是高清的 自己转存看吧~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190709161458.jpg&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="database" scheme="https://theembers.github.io/categories/dev/database/"/>
    
    
      <category term="mysql" scheme="https://theembers.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch[6]-分析(analysis)</title>
    <link href="https://theembers.github.io/2019/07/08/es-6/"/>
    <id>https://theembers.github.io/2019/07/08/es-6/</id>
    <published>2019-07-08T03:18:55.000Z</published>
    <updated>2020-03-05T02:50:57.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析和分析器"><a class="headerlink" href="#分析和分析器"></a> 分析和分析器</h2><p>分析(analysis)是这样一个过程：</p><ol><li>标记化一个文本块为适用于倒排索引单独的词(term)</li><li>标准化这些词为标准形式，提高它们的“可搜索性”或“查全率”</li></ol><p>这个过程由分析器完成，一个分析器包含：</p><ul><li>字符过滤器<br>首先字符串经过字符串过滤器(character filter),用来在标记化前处理字符串，比如去除HTML标签或者转换“&amp;”为“and”</li><li>分词器<br>分词器(tokenizer)根据内建的算法机制对字符串进行词切分，形成单独的词。</li><li>标记过滤<br>标记过滤(token filters)可以修改词（比如大小写转换）、去掉词（比如去掉停用词“the”“and”“a”）、增加词（比如同义词）</li></ul><h3 id="内建分析器"><a class="headerlink" href="#内建分析器"></a> 内建分析器</h3><p>实例文本：<code>&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;</code></p><ul><li>标准分析器<br>它根据Unicode Consortium的定义的单词边界(word boundaries)来切分文本，然后去掉大部分标点符号。最后，把所有词转为小写。<br><code>set, the, shape, to, semi, transparent, by, calling, set_trans, 5</code></li><li>简单分析器<br>将非单个字母的文本切分，然后把每个词转为小写。<br><code>set, the, shape, to, semi, transparent, by, calling, set, trans</code></li><li>空格分析器<br>依据空格切分文本。它不转换小写。<br><code>Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</code></li><li>语言分析器<br>特定语言分析器适用于很多语言。它们能够考虑到特定语言的特性。<br>例如， english 分析器自带一套英语停用词库——像 and 或 the 这些与语义无关的通用词。这些词被移除后，因为语法规则的存在，英语单词的主体含义依旧能被理解。<br><code>set, shape, semi, transpar, call, set_tran, 5</code><br><em>注意 “transparent” 、 “calling” 和 “set_trans” 是如何转为词干的。</em></li></ul><blockquote><p>当我们索引(index)一个文档，全文字段会被分析为单独的词来创建倒排索引。不过，当我们在全文字段搜索(search)时，我们要让查询字符串经过同样的分析流程处理，以确保这些词在索引中存在。<br>全文查询我们将在稍后讨论，理解每个字段是如何定义的，这样才可以让它们做正确的事：<br>当你查询全文(full text)字段，查询将使用相同的分析器来分析查询字符串，以产生正确的词列表。<br>当你查询一个确切值(exact value)字段，查询将不分析查询字符串，但是你可以自己指定。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析和分析器&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#分析和分析器&quot;&gt;&lt;/a&gt; 分析和分析器&lt;/h2&gt;
&lt;p&gt;分析(analysis)是这样一个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标记化一个文本块为适用于倒排索引单独的词(term)&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/categories/dev/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch[5]-正片：映射(mapping)&amp;分词(analysis)前置</title>
    <link href="https://theembers.github.io/2019/07/08/es-5/"/>
    <id>https://theembers.github.io/2019/07/08/es-5/</id>
    <published>2019-07-08T01:35:28.000Z</published>
    <updated>2020-03-05T02:50:57.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a class="headerlink" href="#定义"></a> 定义</h2><ul><li>映射(mapping)机制用于进行字段类型确认，将每个字段匹配为一种确定的数据类型(string,number,booleans,date等)。</li><li>分析(analysis)机制用于进行全文文本(Full Text)的分词，以建立供搜索用的反向索引。</li></ul><h2 id="映射-分词"><a class="headerlink" href="#映射-分词"></a> 映射 &amp; 分词</h2><p>ElasticSearch 会对每一个type进行mapping：通过以下指令可以查看</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;index&#125;/_mapping/&#123;type&#125;/</span><br><span class="line"></span><br><span class="line"># 返回(示例)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"gb"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"date"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">            <span class="attr">"format"</span>: <span class="string">"dateOptionalTime"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"tweet"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"user_id"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 ES对每一个字段进行猜想动态生成了字段和类型的映射关系。比如date字段的类型date，而在_all字段中date的值则是string。那么问题来了，假如使用以下方式进行检索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?q=2019</span><br><span class="line">GET /_search?q=date:2019</span><br></pre></td></tr></table></figure><p>将会得到不一样的结果，因为date类型和string类型的索引方式是不一样的，索引会导致查询结果不一致。</p><blockquote><p>你会期望每一种核心数据类型(strings, numbers, booleans及dates)以不同的方式进行索引，而这点也是现实：在Elasticsearch中他们是被区别对待的。<br>但是更大的区别在于确切值(exact values)(比如 string 类型)及全文文本(full text)之间。<br>这两者的区别才真的很重要 - 这是区分搜索引擎和其他数据库的根本差异。<br>——《ES权威指南（第三版）》</p></blockquote><h2 id="确切值exact-values-全文文本full-text"><a class="headerlink" href="#确切值exact-values-全文文本full-text"></a> 确切值(Exact values) &amp; 全文文本(Full text)</h2><p>Elasticsearch 中的数据可以大致分为两种类型：确切值 及 全文文本。</p><p>确切值 类似于一种结构化的数据值，（是什么就是什么，类似于equals），所以的大小写区别、前缀一致等形式的&quot;等价&quot;都是不成立了。<br>而 全文本 则是一种类似与 非结构化的数据值。（实际上是一种高度结构化的数据）<br>因此，对于确切值来说，他的查询时很简单的，要么匹配，要么不匹配。不会像全文本一样需要对其进行语言的分析以及相关度高低来进行评判。<br>为此，ElasticSearch 使用了全文本分析（analyzes），然后建立 <strong>倒排索引</strong>。</p><h2 id="倒排索引"><a class="headerlink" href="#倒排索引"></a> 倒排索引</h2><p>倒排索引由文档中出现的唯一的单词列表，以及对于每一个单词在文档中的位置组成。</p><p>实例：<br>例如，我们有两个文档，每个文档 content 字段包含：</p><ol><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer<br>为了创建倒排索引，我们首先切分每个文档的 content 字段为单独的单词（我们把它们叫做词(terms)或者表征(tokens)）（译者注：关于 terms 和 tokens 的翻译比较生硬，只需知道语句分词后的个体叫做这两个。），把所有的唯一词放入列表并排序，结果是这个样子的：<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190708104904.png" alt><br>现在，如果我们想搜索 “quick brown” ，我们只需要找到每个词在哪个文档中出现即可：<br><img src="https://image-1257148187.cos.ap-chengdu.myqcloud.com/picgo_img/20190708104931.png" alt></li></ol><p>但是这里依然存在一些问题，之前说的全文搜索应当是一种符合语义的，所以对于其中一些单词的语义、词性的相似度进行比较。所以考虑到这些因素之后的相似度比较就不再那么单纯了。<br>此时就需要一个标准化的过程：<strong>分词（(analysis)）</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;映射(mapping)机制用于进行字段类型确认，将每个字段匹配为一种确定的数据类型(string,number,booleans,date等)。&lt;
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/categories/dev/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch[4]-正片：搜索</title>
    <link href="https://theembers.github.io/2019/07/03/es-4/"/>
    <id>https://theembers.github.io/2019/07/03/es-4/</id>
    <published>2019-07-03T01:44:54.000Z</published>
    <updated>2020-03-05T02:50:57.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="映射-分析-领域特定语言查询dsl"><a class="headerlink" href="#映射-分析-领域特定语言查询dsl"></a> 映射 &amp; 分析 &amp; 领域特定语言查询（dsl）</h2><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">映射(Mapping)</td><td style="text-align:left">数据在每个字段中的解释说明</td></tr><tr><td style="text-align:left">分析(Analysis)</td><td style="text-align:left">全文是如何处理的可以被搜索的</td></tr><tr><td style="text-align:left">领域特定语言查询(Query DSL)</td><td style="text-align:left">Elasticsearch使用的灵活的、强大的查询语言</td></tr></tbody></table><h2 id="多索引-多类别"><a class="headerlink" href="#多索引-多类别"></a> 多索引 &amp; 多类别</h2><p>通过限制搜索的不同索引或类型，可以在集群中跨所有文档搜索。</p><p>指定索引的搜索，可以是通配符的形式，也可以是多个索引：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/&#123;index&#125;,&#123;index&#125;/&#123;type&#125;,&#123;type&#125;/_search</span><br><span class="line"></span><br><span class="line"># 通配符</span><br><span class="line">/g*,u*/x*,y*/_search</span><br></pre></td></tr></table></figure><h2 id="分页"><a class="headerlink" href="#分页"></a> 分页</h2><p>ES接受 from 和 size 参数进行分页查询：</p><ul><li>from 跳过开始的结果数 默认0</li><li>size 结果数 默认10</li></ul><p>例如：<code>/_search?from=10&amp;size=20</code></p><h3 id="分页搜索方式"><a class="headerlink" href="#分页搜索方式"></a> 分页搜索方式</h3><p>ES的搜索可能会涉及到多个分片，Elasticsearch 会转发搜索请求到这个索引的主分片或每个分片的复<br>制分片上，然后聚集每个分片的结果。假如搜索的size是10，那么ES会去检索每个分片上各自符合条件的数据进行排序，并返回10个结果，最后会在请求节点上对所有的结果进行排序并返回，以此保证最终结果的顺序正确。</p><blockquote><p>在集群系统中深度分页<br>为了理解为什么深度分页是有问题的，假设在一个有5个主分片的索引中搜索。当请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，它再排序这所有的50个结果以选出顶端的10个结果。现在假设请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。然后请求节点排序这50050个结果并丢弃50040个！可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。</p></blockquote><h2 id="简易搜索-复杂搜索"><a class="headerlink" href="#简易搜索-复杂搜索"></a> 简易搜索 &amp; 复杂搜索</h2><p>search API有两种表单：</p><ul><li>一种是“简易版”的查询字符串(query string)将所有参数通过查询字符串定义</li><li>另一种版本使用JSON完整的表示请求体(request body)，这种富搜索语言叫做结构化查询语句（DSL）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询 type类型的‘name’字段为tom的文档</span><br><span class="line">GET /_all/&#123;type&#125;/_search?q=name:tom</span><br><span class="line"></span><br><span class="line"># 包含与不包含：‘+’，‘-’</span><br><span class="line">GET /_all/&#123;type&#125;/_search?q=+name:tom-name:jerry</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># name 包含 ‘tom’或‘jerry’</span><br><span class="line"># date 晚于 1993-01-20</span><br><span class="line">q=+name:(tom,jerry)+date:&gt;1993-01-20</span><br></pre></td></tr></table></figure><blockquote><p>这这搜索方式搜索不便之处在于：容易出现语法错误而导致返回错误的搜索结果以及慢查询。<br>因此，一般在生产环境中我们通常会使用请求体搜索API。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;映射-分析-领域特定语言查询dsl&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#映射-分析-领域特定语言查询dsl&quot;&gt;&lt;/a&gt; 映射 &amp;amp; 分析 &amp;amp; 领域特定语言查询（dsl）&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
      <category term="dev" scheme="https://theembers.github.io/categories/dev/"/>
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/categories/dev/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://theembers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
